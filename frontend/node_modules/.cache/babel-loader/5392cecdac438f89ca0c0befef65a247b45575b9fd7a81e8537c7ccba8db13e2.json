{"ast":null,"code":"var _jsxFileName = \"/media/wisp/The Second Disk/stuff/pets_codes/workTestApp/frontend/src/pages/CountryPage.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport CountryPage_Header from \"../components/CountryPage_Header\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CountryPage() {\n  _s();\n  const {\n    country,\n    code\n  } = useParams();\n  const [countryInfo, setCountryInfo] = useState([]);\n  console.log(`${process.env.REACT_APP_GET_COUNTRY_INFO_BASE_URL}?code=${code}&country=${country}`);\n  useEffect(() => {\n    fetch(`http://localhost:3000/api/getCountryInfo?code=${code}&country=${country}`).then(response => {\n      if (!response.ok) {\n        throw new Error(response.status);\n      }\n    }).then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n  if (!countryInfo) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No country information available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(CountryPage_Header, {\n      name: country,\n      flag: countryInfo.flag\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this);\n  }\n}\n_s(CountryPage, \"8r/icC+iFJuXNOXcjdLb6OZqMe0=\", false, function () {\n  return [useParams];\n});\n_c = CountryPage;\nvar _c;\n$RefreshReg$(_c, \"CountryPage\");","map":{"version":3,"names":["useEffect","useState","useParams","CountryPage_Header","jsxDEV","_jsxDEV","CountryPage","_s","country","code","countryInfo","setCountryInfo","console","log","process","env","REACT_APP_GET_COUNTRY_INFO_BASE_URL","fetch","then","response","ok","Error","status","data","children","fileName","_jsxFileName","lineNumber","columnNumber","name","flag","_c","$RefreshReg$"],"sources":["/media/wisp/The Second Disk/stuff/pets_codes/workTestApp/frontend/src/pages/CountryPage.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\";\n\nimport CountryPage_Header from \"../components/CountryPage_Header\"\n\nexport default function CountryPage() {\n    const {country, code} = useParams()\n    const [countryInfo, setCountryInfo] = useState([]);\n    console.log(`${process.env.REACT_APP_GET_COUNTRY_INFO_BASE_URL}?code=${code}&country=${country}`)\n    useEffect(() => {\n        fetch(`http://localhost:3000/api/getCountryInfo?code=${code}&country=${country}`)\n        .then(response => {\n            if(!response.ok) {\n                throw new Error(response.status)\n            }\n        })\n        .then(data => {\n            setCountryInfo(data)\n        })\n    }, [])\n    if(!countryInfo) {\n        return <div>No country information available.</div>;\n    }\n    else {\n    return (\n        <CountryPage_Header name={country} flag={countryInfo.flag}></CountryPage_Header>\n    )\n}\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,OAAOC,kBAAkB,MAAM,kCAAkC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjE,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM;IAACC,OAAO;IAAEC;EAAI,CAAC,GAAGP,SAAS,CAAC,CAAC;EACnC,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClDW,OAAO,CAACC,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,mCAAmC,SAASP,IAAI,YAAYD,OAAO,EAAE,CAAC;EACjGR,SAAS,CAAC,MAAM;IACZiB,KAAK,CAAC,iDAAiDR,IAAI,YAAYD,OAAO,EAAE,CAAC,CAChFU,IAAI,CAACC,QAAQ,IAAI;MACd,IAAG,CAACA,QAAQ,CAACC,EAAE,EAAE;QACb,MAAM,IAAIC,KAAK,CAACF,QAAQ,CAACG,MAAM,CAAC;MACpC;IACJ,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACVZ,cAAc,CAACY,IAAI,CAAC;IACxB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACN,IAAG,CAACb,WAAW,EAAE;IACb,oBAAOL,OAAA;MAAAmB,QAAA,EAAK;IAAiC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACvD,CAAC,MACI;IACL,oBACIvB,OAAA,CAACF,kBAAkB;MAAC0B,IAAI,EAAErB,OAAQ;MAACsB,IAAI,EAAEpB,WAAW,CAACoB;IAAK;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB,CAAC;EAExF;AACA;AAACrB,EAAA,CAvBuBD,WAAW;EAAA,QACPJ,SAAS;AAAA;AAAA6B,EAAA,GADbzB,WAAW;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}